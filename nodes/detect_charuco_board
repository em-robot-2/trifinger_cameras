#!/usr/bin/env python
"""ROS node that detects a charuco board in images and publishes the pose."""
from __future__ import print_function, division

import json
import os
import pickle
import subprocess

import numpy as np
import cv2

import rospy
from ament_index_python.packages import get_package_share_directory
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from tf import transformations

from trifinger_cameras import utils

class CharucoBoardPosePublisher:
    """Subscribes to an image topic and publishes pose of Charuco board.

    Subscribes to an image topic and tries to detect the Charuco board in each
    frame.  If it is detected, its pose is published using a PoseStamped
    message that can easily be visualized in Rviz.

    Subscribers:
        image (sensor_msgs/Image): Input image.

    Publishers:
        ~pose (geometry_msgs/PoseStamped):  Pose of the Charuco board.
            Published whenever it is detected in an image.
    """

    def __init__(self):
        self.cv_bridge = CvBridge()
        self.image_sub = rospy.Subscriber("image", Image, self.callback)
        self.pose_pub = rospy.Publisher("~pose", PoseStamped, queue_size=10)

    def callback(self, msg):
        cv_image = self.cv_bridge.imgmsg_to_cv2(msg, "bgr8")

        # Due to Python version issues, do not call the board detection
        # directly here but store the image to a file in shared memory and call
        # the charuco_board.py script on it...

        # pickle the image to shared memory (cut away the leading "/" from the
        # node name)
        image_path = os.path.join("/dev/shm", rospy.get_name()[1:] + ".pickle")
        with open(image_path, "wb") as file_handle:
            pickle.dump(cv_image, file_handle, pickle.HIGHEST_PROTOCOL)

        # call the script to detect the board
        script_path = os.path.join(
            get_package_share_directory("trifinger_cameras"),
            "scripts",
            "charuco_board.py")
        pose_json = subprocess.check_output([script_path,
                                             "detect_image",
                                             "--no-gui",
                                             "--filename",
                                             image_path])
        pose_dict = json.loads(pose_json)
        rvec = pose_dict["rvec"]
        tvec = pose_dict["tvec"]

        if rvec is not None:
            # convert to pose message and publish
            rvec = np.asarray(rvec)
            tvec = np.asarray(tvec)

            quaternion = utils.rodrigues_to_quaternion(rvec)

            pose = PoseStamped()
            pose.header = msg.header
            pose.pose.position.x = tvec[0]
            pose.pose.position.y = tvec[1]
            pose.pose.position.z = tvec[2]
            pose.pose.orientation.x = quaternion[0]
            pose.pose.orientation.y = quaternion[1]
            pose.pose.orientation.z = quaternion[2]
            pose.pose.orientation.w = quaternion[3]

            self.pose_pub.publish(pose)


def main():
    rospy.init_node("charuco_pose_publisher")

    node = CharucoBoardPosePublisher()  # noqa
    rospy.spin()


if __name__ == "__main__":
    main()
